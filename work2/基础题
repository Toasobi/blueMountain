（1）一个结构体所占空间大小，与下面哪些相关：

​			A 成员本身大小；B 成员对齐系数；C 系统字长

答：我认为应该选ABC ，即都有关系
    结构体内成员本身提供大小，结构体需对其分配内存。
    成员对齐系数和系统字长也有关系。在32位机上，默认成员对齐系数为4，而在64位机上默认成员对齐系数为8。这之间的不同会导致结构体所占内存不同
    举例： type A struct{
             a byte,
             b byte,
             c float64
    }
    如果是在32位机上，float64会被拆分为2个4字节大小，此时A的大小为12字节。如果是在64位机上，系统可以字词处理8个字节，经过内存对齐后A所占内存为16字节。
    
    
（2）下面这个结构体的成员怎么排布，占用内存最小？（假设系统64位）
     type A struct{
      byte1 byte
      a struct{}
      num1 int32
      str string
    }
答：byte占1字节，int32占4字节，string 占16个字节，空结构体不占内存
    所以根据64位机内存对齐方式，这样排布占用内存最小：
     type A struct{
      a struct{}
      byte1 byte
      num1 int32
      str string
      
     }
     
     
（3）Go字符串中，每个字符占用多少字节：

​			A 1；B 3；C 1-4

 答：选C
     1字节（英文）/2~4字节（中文，取决于字符编码类型）
     
     
 (4)  Go的map使用的数据结构是：

​			A B+树；B 开放寻址法的Hash表 ；C 拉链法Hash
 答：选c
     golang中的Map是由链式哈希表实现的，底层是由hash实现的，数据结构为hash数组 + buckets桶 + 溢出的桶链表，每个桶存储最多8个key-value键值对
     链式哈希表从根本上说是由一组链表构成。每个链表都可以看做是一个“桶”，我们将所有的元素通过散列的方式放到具体的不同的桶中。
     插入元素时，首先将其键传入一个哈希函数（该过程称为哈希键），函数通过散列的方式告知元素属于哪个“桶”，然后在相应的链表头插入元素。
     
     
 （5）空结构体的地址在任何时候都是zerobase？

​		   A 是；B 不是
 答：选A
     在源码中，在创建结构体新对象的时候，需要调用malloc.newobject()进行内存分配，进一步调用mallocgc方法
     在该方法中，如果判断该类型size==0，则固定返回一个zerobase（全局变量）。
     在Go语言中，所有针对 size==0 的内存分配，用的都是同一个地址 &zerobase。而该地址始终从0开始
   
   
 （6）空接口就是nil接口？
 答：不是
      nil接口：
      即便接口内的具体值为 nil，方法仍然会被 nil 接收者调用。

      在一些语言中，这会触发一个空指针异常，但在 Go 中通常会写一些方法来优雅地处理它（如本例中的 M 方法）。

      注意: 保存了 nil 具体值的接口其自身并不为 nil。

      nil 接口值既不保存值也不保存具体类型。

      为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个 具体 方法的类型。

     
       空接口
       指定了零个方法的接口值被称为 空接口：

       interface{}
       空接口可保存任何类型的值。（因为每个类型都至少实现了零个方法。）

       空接口被用来处理未知类型的值。例如，fmt.Print 可接受类型为 interface{} 的任意数量的参数。

     
